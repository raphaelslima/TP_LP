
Link relatório: https://docs.google.com/document/d/1DgDsfp-JdSJtebByxKlOknwyOePXtV9NdY4gpQ9TJwA/edit?usp=sharing

Definições:

- Apresentem o relatório com gráficos e tabelas;
- Escrevam no relatório a percepção de vocês em implementar os códigos;

- Vocês devem implementar uma versão sequencial - sem paralelismo - e uma paralela em OpenMP - ambas utilizando somente aritmética de ponteiros - de:
  - Filtro de suavização -> cada elemento será substituído pela média dos seus vizinhos diretos;

- Não há necessidade de usar uma imagem real, simulem uma imagem criando matrizes aleatórias onde cada posição da matriz é um número entre 0 e 255;

- Vocês devem medir os tempos de execução de cada cenário e criar um relatório com as comparações dos tempos de execução com omp_get_wtime();
- Tamanhos das matrizes: 1000 x 1000, 5000 x 5000 e 10000 x 10000;

TAREFAS:
- Quantidade de Threads: 
1 (versão sequencial) (Maurício)
2 
4
8


  - Há benefício em usar o OpenMP?
  - Há vantagem em utilizar a aritmética de ponteiros em relação as implementações comuns?
  - A legibilidade é ruim?
  - Há facilidade de escrita? Em qual dos temas? (aritmética de ponteiros e OpenMP)
- Analisem o porquê da diferença dos tempos de execução.



/// código sequencial rascunho de uma matriz

#include <iostream>
#include <cstdlib>
#include <ctime>

using namespace std;

void processarMatriz(int tamanho){
    /*
    Inicializa a função para gerar números aleatórios, a time(0) retorna um núemro em segundos desde 1 de jan de 1970 
    e a srand() gera uma sequência de números aleatórios , como o parâmetro sempre mudará graças ao time(0) a sequência sempre 
    será diferente em cada execução.
    */
   srand(time(0)); 

   // Aloca matriz de tamanho 10 usando ponteiros
   int *matriz = (int *)malloc(tamanho * tamanho * sizeof(int));

   // Preenche as matrizes com números aleatórios entre 0 e 255
    for (int i = 0; i < tamanho; i++) {
        for (int j = 0; j < tamanho; j++) {
            *(matriz + i * tamanho + j) = rand() % 256;  //tamanho = n (número de colunas)
        }
    }

   // Exibe os valores armazenados na matriz
   cout << "Matriz original de tamanho " << tamanho << ":" << endl;
   for (int i = 0; i < tamanho; i++) {
    for (int j = 0; j < tamanho; j++) {
        cout << *(matriz + i * tamanho + j) << " ";  //tamanho = n (número de colunas)
    }
    cout << endl;
}
    cout << endl;

   // Criar uma nova matriz para armazenar os novos valores após a operação.
   int *nova_matriz = (int *)malloc(tamanho * tamanho * sizeof(int));

   for (int i = 0; i < tamanho; i++) {
    for (int j = 0; j < tamanho; j++) {
        int soma = 0, count = 0;
        
        for (int di = -1; di <= 1; di++) {
            for (int dj = -1; dj <= 1; dj++) {
                int ni = i + di, nj = j + dj;
                if (ni >= 0 && ni < tamanho && nj >= 0 && nj < tamanho && !(di == 0 && dj == 0)) {
                    soma += *(matriz + ni * tamanho + nj);
                    count++;
                }
            }
        }
        *(nova_matriz + i * tamanho + j) = (count > 0) ? (soma / count) : 0;
    }
}

   // Copia os valores da nova matriz para a matriz original
   for (int i = 0; i < tamanho; i++) {
    for (int j = 0; j < tamanho; j++) {
        *(matriz + i * tamanho + j) = *(nova_matriz + i * tamanho + j);
    }
}

// Exibe os valores após a substituição
cout << "Matriz apos substituicao:" << endl;

for (int i = 0; i < tamanho; i++) {
    for (int j = 0; j < tamanho; j++) {
        cout << *(matriz + i * tamanho + j) << " ";  //tamanho = n (número de colunas)
    }
    cout << endl;
}
cout << endl;

   // Libera a memória alocada
   delete[] matriz; 
   delete[] nova_matriz;
}

int main() {
    processarMatriz(10); 
    //processarMatriz(50); 
    //processarMatriz(100);  
    return 0;
}
